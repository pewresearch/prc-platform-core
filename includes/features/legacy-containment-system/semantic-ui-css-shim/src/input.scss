/*!
 * # Semantic UI - Input
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

@use "master.variables"as variables;
@use 'sass:math';
@use 'colors';

/*******************************
             Input
 *******************************/

/*-------------------
       Element
 --------------------*/

$inputFont: variables.$sansSerifFont; //$pageFont;
$inputFontSize: 15px;
$verticalPadding: variables.$inputVerticalPadding;
$horizontalPadding: variables.$inputHorizontalPadding;

$lineHeight: variables.$inputLineHeight;
$lineHeightOffset: math.div(($lineHeight - 1em), 2);

$padding: ($verticalPadding - $lineHeightOffset) $horizontalPadding;

$textAlign: left;
$background: colors.$inputBackground;
$borderWidth: 1px;
$border: $borderWidth solid colors.$borderColor;
$boxShadow: none;

$borderRadius: 5px; // $defaultBorderRadius;
$transition: box-shadow variables.$defaultDuration variables.$defaultEasing,
border-color variables.$defaultDuration variables.$defaultEasing;

/*-------------------
         Types
 --------------------*/

/* Icon Input */
$iconWidth: ($verticalPadding * 2)+variables.$glyphWidth;
$iconOpacity: 0.5;
$iconFocusOpacity: 1;
$iconOffset: -0.5em;

$iconDistance: 0em;
$iconMargin: $iconWidth+$iconDistance;
$iconTransition: opacity 0.3s variables.$defaultEasing;

$transparentIconWidth: variables.$glyphWidth;
$transparentIconMargin: 2em;

/* Circular Icon Input */
$circularIconVerticalOffset: 0.35em;
$circularIconHorizontalOffset: 0.5em;

/* Labeled Input */
$labelCornerTop: $borderWidth;
$labelCornerRight: $borderWidth;
$labelCornerSize: variables.$relative9px;
$labelSize: 1em;
$labelVerticalPadding: ($verticalPadding - $lineHeightOffset);

$labeledMargin: 2.5em;
$labeledIconInputMargin: 3.25em;
$labeledIconMargin: 1.25em;

/*-------------------
         States
 --------------------*/

/* Placeholder */
$placeholderColor: colors.$inputPlaceholderColor;
$placeholderFocusColor: colors.$inputPlaceholderFocusColor;

/* Down */
$downBorderColor: rgba(0, 0, 0, 0.3);
$downBackground: #fafafa;
$downColor: colors.$textColor;
$downBoxShadow: none;

/* Focus */
$focusBorderColor: colors.$grayDark; //$focusedFormBorderColor;
$focusBackground: $background;
$focusColor: colors.$hoveredTextColor;
$focusBoxShadow: none;

/* Error */
$errorBackground: colors.$negativeBackgroundColor;
$errorColor: colors.$negativeTextColor;
$errorBorder: colors.$negativeBorderColor;
$errorBoxShadow: none;

$placeholderErrorColor: lighten($errorColor, 40);
$placeholderErrorFocusColor: lighten($errorColor, 30);

/* Loader */
$invertedLoaderFillColor: rgba(0, 0, 0, 0.15);

/*-------------------
       Variations
 --------------------*/

/* Inverted */
$transparentInvertedPlaceholderColor: colors.$invertedUnselectedTextColor;
$transparentInvertedColor: colors.$white;


/*******************************
            Standard
 *******************************/

/*--------------------
         Inputs
 ---------------------*/

.ui.input {
    position: relative;
    font-weight: variables.$normal;
    font-style: normal;
    display: inline-flex;
    color: colors.$inputColor;
}

.ui.input>input {
    margin: 0em;
    max-width: 100%;
    flex: 1 0 auto;
    outline: none;
    -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
    text-align: $textAlign;
    line-height: $lineHeight;

    font-family: $inputFont;
    padding: $padding;

    background: $background;
    border: $border;
    color: colors.$inputColor;
    border-radius: $borderRadius;
    transition: $transition;

    box-shadow: $boxShadow;
}

/*--------------------
       Placeholder
 ---------------------*/

/* browsers require these rules separate */

.ui.input>input::-webkit-input-placeholder {
    color: $placeholderColor;
    font-size: $inputFontSize;
}

.ui.input>input::-moz-placeholder {
    color: $placeholderColor;
    font-size: $inputFontSize;
}

.ui.input>input:-ms-input-placeholder {
    color: $placeholderColor;
    font-size: $inputFontSize;
}

/*******************************
             States
 *******************************/

/*--------------------
         Disabled
 ---------------------*/

.ui.disabled.input,
.ui.input:not(.disabled) input[disabled] {
    opacity: variables.$disabledOpacity;
}

.ui.disabled.input>input,
.ui.input:not(.disabled) input[disabled] {
    pointer-events: none;
}

/*--------------------
         Active
 ---------------------*/

.ui.input>input:active,
.ui.input.down input {
    border-color: $downBorderColor;
    background: $downBackground;
    color: $downColor;
    box-shadow: $downBoxShadow;
}

/*--------------------
        Loading
 ---------------------*/

.ui.loading.loading.input>i.icon:before {
    position: absolute;
    content: "";
    top: 50%;
    left: 50%;

    margin: variables.$loaderMargin;
    width: variables.$loaderSize;
    height: variables.$loaderSize;

    border-radius: variables.$circularRadius;
    border: variables.$loaderLineWidth solid colors.$loaderFillColor;
}

.ui.loading.loading.input>i.icon:after {
    position: absolute;
    content: "";
    top: 50%;
    left: 50%;

    margin: variables.$loaderMargin;
    width: variables.$loaderSize;
    height: variables.$loaderSize;

    animation: button-spin variables.$loaderSpeed linear;
    animation-iteration-count: infinite;

    border-radius: variables.$circularRadius;

    border-color: colors.$loaderLineColor transparent transparent;
    border-style: solid;
    border-width: variables.$loaderLineWidth;

    box-shadow: 0px 0px 0px 1px transparent;
}

/*--------------------
         Focus
 ---------------------*/

.ui.input.focus>input,
.ui.input>input:focus {
    border-color: $focusBorderColor;
    background: $focusBackground;
    color: $focusColor;
    box-shadow: $focusBoxShadow;
}

.ui.input.focus>input::-webkit-input-placeholder,
.ui.input>input:focus::-webkit-input-placeholder {
    color: $placeholderFocusColor;
}

.ui.input.focus>input::-moz-placeholder,
.ui.input>input:focus::-moz-placeholder {
    color: $placeholderFocusColor;
}

.ui.input.focus>input:-ms-input-placeholder,
.ui.input>input:focus:-ms-input-placeholder {
    color: $placeholderFocusColor;
}

/*--------------------
         Error
 ---------------------*/

.ui.input.error>input {
    background-color: $errorBackground;
    border-color: $errorBorder;
    color: $errorColor;
    box-shadow: $errorBoxShadow;
}

/* Error Placeholder */
.ui.input.error>input::-webkit-input-placeholder {
    color: $placeholderErrorColor;
}

.ui.input.error>input::-moz-placeholder {
    color: $placeholderErrorColor;
}

.ui.input.error>input:-ms-input-placeholder {
    color: $placeholderErrorColor !important;
}

/* Focused Error Placeholder */
.ui.input.error>input:focus::-webkit-input-placeholder {
    color: $placeholderErrorFocusColor;
}

.ui.input.error>input:focus::-moz-placeholder {
    color: $placeholderErrorFocusColor;
}

.ui.input.error>input:focus:-ms-input-placeholder {
    color: $placeholderErrorFocusColor !important;
}

/*******************************
            Variations
 *******************************/

/*--------------------
       Transparent
 ---------------------*/

.ui.transparent.input>input {
    border-color: transparent !important;
    background-color: transparent !important;
    padding: 0em !important;
    box-shadow: none !important;
    border-radius: 0px !important;
}

/* Transparent Icon */
.ui.transparent.icon.input>i.icon {
    width: $transparentIconWidth;
}

.ui.transparent.icon.input>input {
    padding-left: 0em !important;
    padding-right: $transparentIconMargin !important;
}

.ui.transparent[class*="left icon"].input>input {
    padding-left: $transparentIconMargin !important;
    padding-right: 0em !important;
}

/* Transparent Inverted */
.ui.transparent.inverted.input {
    color: $transparentInvertedColor;
}

.ui.transparent.inverted.input>input {
    color: inherit;
}

.ui.transparent.inverted.input>input::-webkit-input-placeholder {
    color: $transparentInvertedPlaceholderColor;
}

.ui.transparent.inverted.input>input::-moz-placeholder {
    color: $transparentInvertedPlaceholderColor;
}

.ui.transparent.inverted.input>input:-ms-input-placeholder {
    color: $transparentInvertedPlaceholderColor;
}

/*--------------------
          Icon
 ---------------------*/

.ui.icon.input>i.icon {
    cursor: default;
    position: absolute;
    line-height: 1;
    text-align: center;
    top: 0px;
    right: 0px;
    margin: 0em;
    height: 100%;

    width: $iconWidth;
    opacity: $iconOpacity;
    border-radius: 0em $borderRadius $borderRadius 0em;
    transition: $iconTransition;
}

.ui.icon.input>i.icon:not(.link) {
    pointer-events: none;
}

.ui.icon.input>input {
    padding-right: $iconMargin !important;
}

.ui.icon.input>i.icon:before,
.ui.icon.input>i.icon:after {
    left: 0;
    position: absolute;
    text-align: center;
    top: 50%;
    width: 100%;
    margin-top: $iconOffset;
}

.ui.icon.input>i.link.icon {
    cursor: pointer;
}

.ui.icon.input>i.circular.icon {
    top: $circularIconVerticalOffset;
    right: $circularIconHorizontalOffset;
}

/* Left Icon Input */
.ui[class*="left icon"].input>i.icon {
    right: auto;
    left: $borderWidth;
    border-radius: $borderRadius 0em 0em $borderRadius;
}

.ui[class*="left icon"].input>i.circular.icon {
    right: auto;
    left: $circularIconHorizontalOffset;
}

.ui[class*="left icon"].input>input {
    padding-left: $iconMargin !important;
    padding-right: $horizontalPadding !important;
}

/* Focus */
.ui.icon.input>input:focus~i.icon {
    opacity: 1;
}

/*--------------------
         Labeled
 ---------------------*/

/* Adjacent Label */
.ui.labeled.input>.label {
    flex: 0 0 auto;
    margin: 0;
    font-size: variables.$relativeMedium;
}

.ui.labeled.input>.label:not(.corner) {
    padding-top: $verticalPadding;
    padding-bottom: $verticalPadding;
}

/* Regular Label on Left */
.ui.labeled.input:not([class*="corner labeled"]) .label:first-child {
    border-top-right-radius: 0px;
    border-bottom-right-radius: 0px;
}

.ui.labeled.input:not([class*="corner labeled"]) .label:first-child+input {
    border-top-left-radius: 0px;
    border-bottom-left-radius: 0px;
    border-left-color: transparent;
}

.ui.labeled.input:not([class*="corner labeled"]) .label:first-child+input:focus {
    border-left-color: $focusBorderColor;
}

/* Regular Label on Right */
.ui[class*="right labeled"].input>input {
    border-top-right-radius: 0px !important;
    border-bottom-right-radius: 0px !important;
    border-right-color: transparent !important;
}

.ui[class*="right labeled"].input>input+.label {
    border-top-left-radius: 0px;
    border-bottom-left-radius: 0px;
}

.ui[class*="right labeled"].input>input:focus {
    border-right-color: $focusBorderColor !important;
}

/* Corner Label */
.ui.labeled.input .corner.label {
    top: $labelCornerTop;
    right: $labelCornerRight;
    font-size: $labelCornerSize;
    border-radius: 0em $borderRadius 0em 0em;
}

/* Spacing with corner label */
.ui[class*="corner labeled"]:not([class*="left corner labeled"]).labeled.input>input {
    padding-right: $labeledMargin !important;
}

.ui[class*="corner labeled"].icon.input:not([class*="left corner labeled"])>input {
    padding-right: $labeledIconInputMargin !important;
}

.ui[class*="corner labeled"].icon.input:not([class*="left corner labeled"])>.icon {
    margin-right: $labeledIconMargin;
}

/* Left Labeled */
.ui[class*="left corner labeled"].labeled.input>input {
    padding-left: $labeledMargin !important;
}

.ui[class*="left corner labeled"].icon.input>input {
    padding-left: $labeledIconInputMargin !important;
}

.ui[class*="left corner labeled"].icon.input>.icon {
    margin-left: $labeledIconMargin;
}

/* Corner Label Position  */
.ui.input>.ui.corner.label {
    top: $borderWidth;
    right: $borderWidth;
}

.ui.input>.ui.left.corner.label {
    right: auto;
    left: $borderWidth;
}

/*--------------------
         Action
 ---------------------*/

.ui.action.input>.button,
.ui.action.input>.buttons {
    display: flex;
    align-items: center;
    flex: 0 0 auto;
}

.ui.action.input>.button,
.ui.action.input>.buttons>.button {
    padding-top: $verticalPadding;
    padding-bottom: $verticalPadding;
    margin: 0;
}

/* Button on Right */
.ui.action.input:not([class*="left action"])>input {
    border-radius: 0;
    border-right-color: transparent !important;
}

.ui.action.input:not([class*="left action"])>.dropdown:not(:first-child),
.ui.action.input:not([class*="left action"])>.button:not(:first-child),
.ui.action.input:not([class*="left action"])>.buttons:not(:first-child)>.button {
    border-radius: 0px;
}

.ui.action.input:not([class*="left action"])>.dropdown:last-child,
.ui.action.input:not([class*="left action"])>.button:last-child,
.ui.action.input:not([class*="left action"])>.buttons:last-child>.button {
    border-radius: 0px;
}

/* Input Focus */
.ui.action.input:not([class*="left action"])>input:focus {
    border-right-color: $focusBorderColor !important;
}

/* Button on Left */
.ui[class*="left action"].input>input {
    border-radius: 0px;
    border-left-color: transparent !important;
}

.ui[class*="left action"].input>.dropdown,
.ui[class*="left action"].input>.button,
.ui[class*="left action"].input>.buttons>.button {
    border-radius: 0px;
}

.ui[class*="left action"].input>.dropdown:first-child,
.ui[class*="left action"].input>.button:first-child,
.ui[class*="left action"].input>.buttons:first-child>.button {
    border-radius: 0px;
}

/* Input Focus */
.ui[class*="left action"].input>input:focus {
    border-left-color: $focusBorderColor !important;
}

/*--------------------
        Inverted
 ---------------------*/

/* Standard */
.ui.inverted.input>input {
    border: none;
}

/*--------------------
         Fluid
 ---------------------*/

.ui.fluid.input {
    display: flex;
}

.ui.fluid.input>input {
    // width: 0px !important;
}

/*--------------------
         Size
 ---------------------*/
// Note: These used to use relative units, I've changed them to absolute and scaled them down a size (small is now tiny, mini we've completly taken out.

.ui.mini.input {
    font-size: variables.$mini;
}

.ui.small.input {
    font-size: variables.$tiny;
}

.ui.input {
    font-size: variables.$small;
}

.ui.large.input {
    font-size: variables.$medium;
}

.ui.big.input {
    font-size: variables.$large;
}

.ui.huge.input {
    font-size: variables.$big;
}

.ui.massive.input {
    font-size: variables.$huge;
}