/*!
 * # Semantic UI - Modal
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

@use "master.variables"as variables;
@use "functions" as functions;
@use "colors";

/*******************************
              Modal
 *******************************/

$background: colors.$white;
$border: none;
$zIndex: 1001;
$borderRadius: variables.$defaultBorderRadius;
$transformOrigin: 50% 25%;
$boxShadow: 1px 3px 3px 0px rgba(0, 0, 0, 0.2),
1px 3px 15px 2px rgba(0, 0, 0, 0.2);

/* Close Icon */
$closeOpacity: 0.8;
$closeSize: 1.25em;
$closeColor: colors.$white;

$closeHitbox: 2.25rem;
$closeDistance: 0.25rem;
$closeHitBoxOffset: ($closeHitbox - 1rem) * 0.5;
$closePadding: $closeHitBoxOffset 0rem 0rem 0rem;
$closeTop: -($closeDistance + $closeHitbox);
$closeRight: -($closeDistance + $closeHitbox);

/* Header */
$headerMargin: 0em;
$headerVerticalPadding: 1.25rem;
$headerHorizontalPadding: 1.5rem;
$headerPadding: $headerVerticalPadding $headerHorizontalPadding;
$headerBackground: colors.$white;
$headerColor: colors.$darkTextColor;
$headerFontSize: variables.$huge;
$headerBoxShadow: none;
$headerFontWeight: variables.$bold;
$headerFontFamily: variables.$headerFont;
$headerBorder: 1px solid colors.$borderColor;

/* Content */
$contentFontSize: 1em;
$contentPadding: 1.5rem;
$contentLineHeight: 1.4;
$contentBackground: #ffffff;

/* Image / Description */
$imageWidth: "";
$imageIconSize: 8rem;
$imageVerticalAlign: top;

$descriptionDistance: 2em;
$descriptionMinWidth: "";
$descriptionWidth: auto;
$descriptionVerticalAlign: top;

/* Modal Actions */
$actionBorder: 1px solid colors.$borderColor;
$actionBackground: colors.$offWhite;
$actionPadding: 1rem 1rem;
$actionAlign: right;

$buttonDistance: 0.75em;

/* Inner Close Position (Tablet/Mobile) */
$innerCloseTop: ($headerVerticalPadding - $closeHitBoxOffset + functions.strip-unit(variables.$lineHeight - 1em));
$innerCloseRight: 1rem;
$innerCloseColor: colors.$textColor;

/* Mobile Positions */
$mobileHeaderPadding: 0.75rem 1rem;
$mobileContentPadding: 1rem;
$mobileImagePadding: 0rem 0rem 1rem;
$mobileDescriptionPadding: 1rem 0rem;
$mobileButtonDistance: 1rem;
$mobileActionPadding: 1rem 1rem (1rem - $mobileButtonDistance);
$mobileImageIconSize: 5rem;
$mobileCloseTop: 0.5rem;
$mobileCloseRight: 0.5rem;

/* Responsive Widths */
$mobileWidth: 95%;
$tabletWidth: 88%;
$computerWidth: 850px;
$largeMonitorWidth: 900px;
$widescreenMonitorWidth: 950px;

$mobileMargin: 0em 0em 0em 0em;
$tabletMargin: 0em 0em 0em 0em;
$computerMargin: 0em 0em 0em 0em;
$largeMonitorMargin: 0em 0em 0em 0em;
$widescreenMonitorMargin: 0em 0em 0em 0em;

$fullScreenWidth: 95%;
$fullScreenOffset: 0em;
$fullScreenMargin: 1em auto;

/* Coupling */
$invertedBoxShadow: 1px 3px 10px 2px rgba(0, 0, 0, 0.2);

/*-------------------
        States
 --------------------*/

$loadingZIndex: -1;

/*-------------------
         Types
 --------------------*/

/* Basic */
$basicModalHeaderColor: colors.$white;
$basicModalColor: colors.$white;
$basicModalCloseTop: 1rem;
$basicModalCloseRight: 1.5rem;
$basicInnerCloseColor: colors.$white;

$basicInvertedModalColor: colors.$textColor;
$basicInvertedModalHeaderColor: colors.$darkTextColor;

/* Top Aligned */
$topAlignedMargin: 5vh;
$mobileTopAlignedMargin: 1rem;

/* Scrolling Margin */
$scrollingMargin: 1rem;
$mobileScrollingMargin: $mobileTopAlignedMargin;

/* Scrolling Content */
$scrollingContentMaxHeight: calc(80vh - 10em);

/*-------------------
       Variations
 --------------------*/

/* Size Widths */
$miniRatio: 0.4;
$tinyRatio: 0.6;
$smallRatio: 0.8;
$largeRatio: 1.2;

/* Derived Responsive Sizes */
$miniHeaderSize: 1.3em;
$miniMobileWidth: $mobileWidth;
$miniTabletWidth: ($tabletWidth * $miniRatio);
$miniComputerWidth: ($computerWidth * $miniRatio);
$miniLargeMonitorWidth: ($largeMonitorWidth * $miniRatio);
$miniWidescreenMonitorWidth: ($widescreenMonitorWidth * $miniRatio);

$miniMobileMargin: 0em 0em 0em 0em;
$miniTabletMargin: 0em 0em 0em 0em;
$miniComputerMargin: 0em 0em 0em 0em;
$miniLargeMonitorMargin: 0em 0em 0em 0em;
$miniWidescreenMonitorMargin: 0em 0em 0em 0em;

$tinyHeaderSize: 1.3em;
$tinyMobileWidth: $mobileWidth;
$tinyTabletWidth: ($tabletWidth * $tinyRatio);
$tinyComputerWidth: ($computerWidth * $tinyRatio);
$tinyLargeMonitorWidth: ($largeMonitorWidth * $tinyRatio);
$tinyWidescreenMonitorWidth: ($widescreenMonitorWidth * $tinyRatio);

$tinyMobileMargin: 0em 0em 0em 0em;
$tinyTabletMargin: 0em 0em 0em 0em;
$tinyComputerMargin: 0em 0em 0em 0em;
$tinyLargeMonitorMargin: 0em 0em 0em 0em;
$tinyWidescreenMonitorMargin: 0em 0em 0em 0em;

$smallHeaderSize: 1.3em;
$smallMobileWidth: $mobileWidth;
$smallTabletWidth: ($tabletWidth * $smallRatio);
$smallComputerWidth: ($computerWidth * $smallRatio);
$smallLargeMonitorWidth: ($largeMonitorWidth * $smallRatio);
$smallWidescreenMonitorWidth: ($widescreenMonitorWidth * $smallRatio);

$smallMobileMargin: 0em 0em 0em 0em;
$smallTabletMargin: 0em 0em 0em 0em;
$smallComputerMargin: 0em 0em 0em 0em;
$smallLargeMonitorMargin: 0em 0em 0em 0em;
$smallWidescreenMonitorMargin: 0em 0em 0em 0em;

$largeHeaderSize: 1.6em;
$largeMobileWidth: $mobileWidth;
$largeTabletWidth: $tabletWidth;
$largeComputerWidth: ($computerWidth * $largeRatio);
$largeLargeMonitorWidth: ($largeMonitorWidth * $largeRatio);
$largeWidescreenMonitorWidth: ($widescreenMonitorWidth * $largeRatio);

$largeMobileMargin: 0em 0em 0em 0em;
$largeTabletMargin: 0em 0em 0em 0em;
$largeComputerMargin: 0em 0em 0em 0em;
$largeLargeMonitorMargin: 0em 0em 0em 0em;
$largeWidescreenMonitorMargin: 0em 0em 0em 0em;


/*******************************
              Modal
 *******************************/

.ui.modal {
    position: absolute;
    display: none;
    z-index: $zIndex;
    text-align: left;

    background: $background;
    border: $border;
    box-shadow: $boxShadow;
    transform-origin: $transformOrigin;

    flex: 0 0 auto;

    border-radius: $borderRadius;
    user-select: text;
    will-change: top, left, margin, transform, opacity;
}

.ui.modal> :first-child:not(.icon),
.ui.modal>.icon:first-child+* {
    border-top-left-radius: $borderRadius;
    border-top-right-radius: $borderRadius;
}

.ui.modal> :last-child {
    border-bottom-left-radius: $borderRadius;
    border-bottom-right-radius: $borderRadius;
}

/*******************************
             Content
 *******************************/

/*--------------
      Close
 ---------------*/

.ui.modal>.close {
    cursor: pointer;
    position: absolute;
    top: $closeTop;
    right: $closeRight;
    z-index: 1;

    opacity: $closeOpacity;
    font-size: $closeSize;
    color: var(--wp--preset--color--light-gray, white);

    width: $closeHitbox;
    height: $closeHitbox;
    padding: $closePadding;
}

.ui.modal>.close:hover {
    opacity: 1;
}

/*--------------
      Header
 ---------------*/

.ui.modal>.header {
    display: block;
    font-family: $headerFontFamily;
    background: $headerBackground;
    margin: $headerMargin;
    padding: $headerPadding;
    box-shadow: $headerBoxShadow;

    color: $headerColor;
    border-bottom: $headerBorder;
}

.ui.modal>.header:not(.ui) {
    font-size: $headerFontSize;
    line-height: variables.$headerLineHeight;
    font-weight: $headerFontWeight;
}

/*--------------
      Content
 ---------------*/

.ui.modal>.content {
    display: block;
    width: 100%;
    font-size: $contentFontSize;
    line-height: $contentLineHeight;
    padding: $contentPadding;
    background: $contentBackground;
}

.ui.modal>.image.content {
    display: flex;
    flex-direction: row;
}

/* Image */
.ui.modal>.content>.image {
    display: block;
    flex: 0 1 auto;
    width: $imageWidth;
    align-self: $imageVerticalAlign;
}

.ui.modal>[class*="top aligned"] {
    align-self: top;
}

.ui.modal>[class*="middle aligned"] {
    align-self: middle;
}

.ui.modal>[class*="stretched"] {
    align-self: stretch;
}

/* Description */
.ui.modal>.content>.description {
    display: block;
    flex: 1 0 auto;
    min-width: 0px;
    align-self: $descriptionVerticalAlign;
}

.ui.modal>.content>.icon+.description,
.ui.modal>.content>.image+.description {
    flex: 0 1 auto;
    min-width: $descriptionMinWidth;
    width: $descriptionWidth;
    padding-left: $descriptionDistance;
}

/*rtl:ignore*/
.ui.modal>.content>.image>i.icon {
    margin: 0em;
    opacity: 1;
    width: auto;
    line-height: 1;
    font-size: $imageIconSize;
}

/*--------------
      Actions
 ---------------*/

.ui.modal>.actions {
    background: $actionBackground;
    padding: $actionPadding;
    border-top: $actionBorder;
    text-align: $actionAlign;
}

.ui.modal .actions>.button {
    margin-left: $buttonDistance;
}

/*-------------------
        Responsive
 --------------------*/

/* Modal Width */
@media only screen and (max-width: variables.$largestMobileScreen) {
    .ui.modal {
        width: $mobileWidth;
        margin: $mobileMargin;
    }
}

@media only screen and (min-width: variables.$tabletBreakpoint) {
    .ui.modal {
        width: $tabletWidth;
        margin: $tabletMargin;
    }
}

@media only screen and (min-width: variables.$computerBreakpoint) {
    .ui.modal {
        width: $computerWidth;
        margin: $computerMargin;
    }
}

@media only screen and (min-width: variables.$largeMonitorBreakpoint) {
    .ui.modal {
        width: $largeMonitorWidth;
        margin: $largeMonitorMargin;
    }
}

@media only screen and (min-width: variables.$widescreenMonitorBreakpoint) {
    .ui.modal {
        width: $widescreenMonitorWidth;
        margin: $widescreenMonitorMargin;
    }
}

/* Tablet and Mobile */
@media only screen and (max-width: variables.$largestTabletScreen) {
    .ui.modal>.header {
        padding-right: $closeHitbox;
    }

    .ui.modal>.close {
        top: $innerCloseTop;
        right: $innerCloseRight;
    }
}

/* Mobile */
@media only screen and (max-width: variables.$largestMobileScreen) {
    .ui.modal>.header {
        padding: $mobileHeaderPadding !important;
        padding-right: $closeHitbox !important;
    }

    .ui.modal>.content {
        display: block;
        padding: $mobileContentPadding !important;
    }

    .ui.modal>.close {
        top: $mobileCloseTop !important;
        right: $mobileCloseRight !important;
    }

    /*rtl:ignore*/
    .ui.modal .image.content {
        flex-direction: column;
    }

    .ui.modal .content>.image {
        display: block;
        max-width: 100%;
        margin: 0em auto !important;
        text-align: center;
        padding: $mobileImagePadding !important;
    }

    .ui.modal>.content>.image>i.icon {
        font-size: $mobileImageIconSize;
        text-align: center;
    }

    /*rtl:ignore*/
    .ui.modal .content>.description {
        display: block;
        width: 100% !important;
        margin: 0em !important;
        padding: $mobileDescriptionPadding !important;
        box-shadow: none;
    }

    /* Let Buttons Stack */
    .ui.modal>.actions {
        padding: $mobileActionPadding !important;
    }

    .ui.modal .actions>.buttons,
    .ui.modal .actions>.button {
        margin-bottom: $mobileButtonDistance;
    }
}

/*--------------
     Coupling
 ---------------*/

.ui.inverted.dimmer>.ui.modal {
    box-shadow: $invertedBoxShadow;
}

/*******************************
              Types
 *******************************/

.ui.basic.modal {
    background-color: transparent;
    border: none;
    border-radius: 0em;
    box-shadow: none !important;
    color: $basicModalColor;
}

.ui.basic.modal>.header,
.ui.basic.modal>.content,
.ui.basic.modal>.actions {
    background-color: transparent;
}

.ui.basic.modal>.header {
    color: $basicModalHeaderColor;
}

.ui.basic.modal>.close {
    color: var(--wp--preset--color--slate, black);
}

.ui.inverted.dimmer>.basic.modal {
    color: $basicInvertedModalColor;
}

.ui.inverted.dimmer>.ui.basic.modal>.header {
    color: $basicInvertedModalHeaderColor;
}

/* Resort to margin positioning if legacy */
.ui.legacy.modal,
.ui.legacy.page.dimmer>.ui.modal {
    top: 50%;
    left: 50%;
}

.ui.legacy.page.dimmer>.ui.scrolling.modal,
.ui.page.dimmer>.ui.scrolling.legacy.modal,
.ui.top.aligned.legacy.page.dimmer>.ui.modal,
.ui.top.aligned.dimmer>.ui.legacy.modal {
    top: auto;
}

/*******************************
              States
 *******************************/

.ui.loading.modal {
    display: block;
    visibility: hidden;
    z-index: $loadingZIndex;
}

.ui.active.modal {
    display: block;
}

/*******************************
            Variations
 *******************************/

/*--------------
    Top Aligned
 ---------------*/

/* Top Aligned Modal */
.modals.dimmer[class*="top aligned"] .modal {
    margin: $topAlignedMargin auto;
}

@media only screen and (max-width: variables.$largestMobileScreen) {
    .modals.dimmer[class*="top aligned"] .modal {
        margin: $mobileTopAlignedMargin auto;
    }
}

/* Legacy Top Aligned */
.legacy.modals.dimmer[class*="top aligned"] {
    padding-top: $topAlignedMargin;
}

@media only screen and (max-width: variables.$largestMobileScreen) {
    .legacy.modals.dimmer[class*="top aligned"] {
        padding-top: $mobileTopAlignedMargin;
    }
}

/*--------------
     Scrolling
 ---------------*/

/* Scrolling Dimmer */
.scrolling.dimmable.dimmed {
    overflow: hidden;
}

.scrolling.dimmable>.dimmer {
    justify-content: flex-start;
}

.scrolling.dimmable.dimmed>.dimmer {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
}

.scrolling.dimmable>.dimmer {
    position: fixed;
}

.modals.dimmer .ui.scrolling.modal {
    margin: $scrollingMargin auto;
}

/* Undetached Scrolling */
.scrolling.undetached.dimmable.dimmed {
    overflow: auto;
    -webkit-overflow-scrolling: touch;
}

.scrolling.undetached.dimmable.dimmed>.dimmer {
    overflow: hidden;
}

.scrolling.undetached.dimmable .ui.scrolling.modal {
    position: absolute;
    left: 50%;
    margin-top: $scrollingMargin !important;
}

/* Scrolling Content */
.ui.modal .scrolling.content {
    max-height: $scrollingContentMaxHeight;
    overflow: auto;
}

/*--------------
    Full Screen
 ---------------*/

.ui.fullscreen.modal {
    width: $fullScreenWidth !important;
    margin: $fullScreenMargin;
}

.ui.fullscreen.modal>.header {
    padding-right: $closeHitbox;
}

.ui.fullscreen.modal>.close {
    top: $innerCloseTop;
    right: $innerCloseRight;
}

/*--------------
       Size
 ---------------*/

.ui.modal {
    font-size: variables.$medium;
}

/* Mini */
.ui.mini.modal>.header:not(.ui) {
    font-size: $miniHeaderSize;
}

/* Mini Modal Width */
@media only screen and (max-width: variables.$largestMobileScreen) {
    .ui.mini.modal {
        width: $miniMobileWidth;
        margin: $miniMobileMargin;
    }
}

@media only screen and (min-width: variables.$tabletBreakpoint) {
    .ui.mini.modal {
        width: $miniTabletWidth;
        margin: $miniTabletMargin;
    }
}

@media only screen and (min-width: variables.$computerBreakpoint) {
    .ui.mini.modal {
        width: $miniComputerWidth;
        margin: $miniComputerMargin;
    }
}

@media only screen and (min-width: variables.$largeMonitorBreakpoint) {
    .ui.mini.modal {
        width: $miniLargeMonitorWidth;
        margin: $miniLargeMonitorMargin;
    }
}

@media only screen and (min-width: variables.$widescreenMonitorBreakpoint) {
    .ui.mini.modal {
        width: $miniWidescreenMonitorWidth;
        margin: $miniWidescreenMonitorMargin;
    }
}

/* mini */
.ui.small.modal>.header:not(.ui) {
    font-size: $miniHeaderSize;
}

/* Tiny Modal Width */
@media only screen and (max-width: variables.$largestMobileScreen) {
    .ui.tiny.modal {
        width: $tinyMobileWidth;
        margin: $tinyMobileMargin;
    }
}

@media only screen and (min-width: variables.$tabletBreakpoint) {
    .ui.tiny.modal {
        width: $tinyTabletWidth;
        margin: $tinyTabletMargin;
    }
}

@media only screen and (min-width: variables.$computerBreakpoint) {
    .ui.tiny.modal {
        width: $tinyComputerWidth;
        margin: $tinyComputerMargin;
    }
}

@media only screen and (min-width: variables.$largeMonitorBreakpoint) {
    .ui.tiny.modal {
        width: $tinyLargeMonitorWidth;
        margin: $tinyLargeMonitorMargin;
    }
}

@media only screen and (min-width: variables.$widescreenMonitorBreakpoint) {
    .ui.tiny.modal {
        width: $tinyWidescreenMonitorWidth;
        margin: $tinyWidescreenMonitorMargin;
    }
}

/* Small */
.ui.small.modal>.header:not(.ui) {
    font-size: $smallHeaderSize;
}

/* Small Modal Width */
@media only screen and (max-width: variables.$largestMobileScreen) {
    .ui.small.modal {
        width: $smallMobileWidth;
        margin: $smallMobileMargin;
    }
}

@media only screen and (min-width: variables.$tabletBreakpoint) {
    .ui.small.modal {
        width: $smallTabletWidth;
        margin: $smallTabletMargin;
    }
}

@media only screen and (min-width: variables.$computerBreakpoint) {
    .ui.small.modal {
        width: $smallComputerWidth;
        margin: $smallComputerMargin;
    }
}

@media only screen and (min-width: variables.$largeMonitorBreakpoint) {
    .ui.small.modal {
        width: $smallLargeMonitorWidth;
        margin: $smallLargeMonitorMargin;
    }
}

@media only screen and (min-width: variables.$widescreenMonitorBreakpoint) {
    .ui.small.modal {
        width: $smallWidescreenMonitorWidth;
        margin: $smallWidescreenMonitorMargin;
    }
}

/* Large Modal Width */
.ui.large.modal>.header {
    font-size: $largeHeaderSize;
}

@media only screen and (max-width: variables.$largestMobileScreen) {
    .ui.large.modal {
        width: $largeMobileWidth;
        margin: $largeMobileMargin;
    }
}

@media only screen and (min-width: variables.$tabletBreakpoint) {
    .ui.large.modal {
        width: $largeTabletWidth;
        margin: $largeTabletMargin;
    }
}

@media only screen and (min-width: variables.$computerBreakpoint) {
    .ui.large.modal {
        width: $largeComputerWidth;
        margin: $largeComputerMargin;
    }
}

@media only screen and (min-width: variables.$largeMonitorBreakpoint) {
    .ui.large.modal {
        width: $largeLargeMonitorWidth;
        margin: $largeLargeMonitorMargin;
    }
}

@media only screen and (min-width: variables.$widescreenMonitorBreakpoint) {
    .ui.large.modal {
        width: $largeWidescreenMonitorWidth;
        margin: $largeWidescreenMonitorMargin;
    }
}
