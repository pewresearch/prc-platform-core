{"version":3,"file":"index.js","mappings":"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","sources":["webpack://@prc/hooks/external window \"React\"","webpack://@prc/hooks/external window [\"wp\",\"element\"]","webpack://@prc/hooks/external window [\"wp\",\"data\"]","webpack://@prc/hooks/external window [\"wp\",\"coreData\"]","webpack://@prc/hooks/external window [\"wp\",\"htmlEntities\"]","webpack://@prc/hooks/./index.js","webpack://@prc/hooks/./use-client-width.js","webpack://@prc/hooks/./use-debounce.js","webpack://@prc/hooks/./use-fetch.js","webpack://@prc/hooks/./use-keypress.js","webpack://@prc/hooks/./use-local-storage.js","webpack://@prc/hooks/./use-window-size.js","webpack://@prc/hooks/./use-taxonomy.js","webpack://@prc/hooks/./use-has-innerblock-selected.js","webpack://@prc/hooks/./use-multi-entity-records.js","webpack://@prc/hooks/./use-after-preview.js","webpack://@prc/hooks/./use-after-publish.js","webpack://@prc/hooks/./use-postids-as-options.js","webpack://@prc/hooks/./use-device-bound-attribute.js"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"coreData\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"htmlEntities\"];","import useClientWidth from './use-client-width';\nimport useDebounce from './use-debounce';\nimport useFetch from './use-fetch';\nimport useKeyPress from './use-keypress';\nimport useHasSelectedInnerBlock from './use-has-innerblock-selected';\nimport useLocalStorage from './use-local-storage';\nimport useMultiEntityRecords from './use-multi-entity-records';\nimport useTaxonomy from './use-taxonomy';\nimport useWindowSize from './use-window-size';\nimport useAfterPreview from './use-after-preview';\nimport useAfterPublish from './use-after-publish';\nimport usePostIdsAsOptions from './use-postids-as-options';\nimport useDeviceBoundAttribute from './use-device-bound-attribute';\n\nfunction loadScript(slug, script) {\n\tif (!window.prcHooks[slug]) {\n\t\twindow.prcHooks[slug] = script;\n\t}\n}\n\nwindow.prcHooks = {};\n\nloadScript('useClientWidth', useClientWidth);\nloadScript('useDebounce', useDebounce);\nloadScript('useFetch', useFetch);\nloadScript('useKeyPress', useKeyPress);\nloadScript('useLocalStorage', useLocalStorage);\nloadScript('useWindowSize', useWindowSize);\nloadScript('useTaxonomy', useTaxonomy);\nloadScript('useHasSelectedInnerBlock', useHasSelectedInnerBlock);\nloadScript('useMultiEntityRecords', useMultiEntityRecords);\nloadScript('useAfterPreview', useAfterPreview);\nloadScript('useAfterPublish', useAfterPublish);\nloadScript('usePostIdsAsOptions', usePostIdsAsOptions);\nloadScript('useDeviceBoundAttribute', useDeviceBoundAttribute);\n\nconsole.log('Loading @prc/hooks...', window.prcHooks);\n","/**\n * WordPress dependencies\n */\nimport { useState, useEffect } from 'react';\n\n/**\n * A hook to get the client width of an element and update it as the window resizes.\n *\n * @param {element} ref\n * @param {Array}   dependencies\n * @return\n */\nexport default function useClientWidth(ref, dependencies) {\n\tconst [clientWidth, setClientWidth] = useState();\n\n\tfunction calculateClientWidth() {\n\t\tsetClientWidth(ref?.current?.clientWidth);\n\t}\n\n\tuseEffect(calculateClientWidth, [ref, dependencies]);\n\n\tuseEffect(() => {\n\t\tconsole.log('useClientWidth', ref, dependencies);\n\t\tif (ref?.current?.ownerDocument === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tconst { defaultView } = ref?.current?.ownerDocument;\n\n\t\tdefaultView.addEventListener('resize', calculateClientWidth);\n\n\t\treturn () => {\n\t\t\tdefaultView.removeEventListener('resize', calculateClientWidth);\n\t\t};\n\t}, [ref]);\n\n\treturn clientWidth;\n}\n","/**\n * WordPress Dependencies\n */\nimport { useState, useEffect } from '@wordpress/element';\n\n/**\n * Watches an inputValue and returns a debounced version of it after set delay.\n * Usage: const debouncedValue = useDebounce('a string being typed by a user...', 500);\n * @param {*} inputValue\n * @param {*} delay\n * @returns value after delay\n */\nconst useDebounce = (value, delay) => {\n\t// State and setters for debounced value\n\tconst [debouncedValue, setDebouncedValue] = useState(value);\n\tuseEffect(\n\t\t() => {\n\t\t\t// Update debounced value after delay\n\t\t\tconst handler = setTimeout(() => {\n\t\t\t\tsetDebouncedValue(value);\n\t\t\t}, delay);\n\t\t\t// Cancel the timeout if value changes (also on delay change or unmount)\n\t\t\t// This is how we prevent debounced value from updating if value is changed ...\n\t\t\t// .. within the delay period. Timeout gets cleared and restarted.\n\t\t\treturn () => {\n\t\t\t\tclearTimeout(handler);\n\t\t\t};\n\t\t},\n\t\t[value, delay], // Only re-call effect if value or delay changes\n\t);\n\treturn debouncedValue;\n};\n\nexport default useDebounce;\n","import { useEffect, useRef, useReducer } from '@wordpress/element';\n\n/**\n * A react hook to fetch data from a url and store status, errors, and date in state.\n * Usage: const { status, data, error } = useFetch(url);\n * Adapted from https://www.smashingmagazine.com/2020/07/custom-react-hook-fetch-cache-data/\n * Example application: https://codesandbox.io/s/usefetch-demo-clt9o\n * @param {*} url\n * @returns {object} status, data, and error\n */\nconst useFetch = (url) => {\n\tconst cache = useRef({});\n\n\t// initial state, no preloaded data\n\tconst initialState = {\n\t\tstatus: 'idle',\n\t\terror: null,\n\t\tdata: [],\n\t};\n\n\t// reducer function to update state depending on current status of fetch\n\tconst reducer = (state, action) => {\n\t\tswitch (action.type) {\n\t\t\tcase 'FETCHING':\n\t\t\t\treturn { ...initialState, status: 'fetching' };\n\t\t\tcase 'FETCHED':\n\t\t\t\treturn {\n\t\t\t\t\t...initialState,\n\t\t\t\t\tstatus: 'fetched',\n\t\t\t\t\tdata: action.payload,\n\t\t\t\t};\n\t\t\tcase 'FETCH_ERROR':\n\t\t\t\treturn {\n\t\t\t\t\t...initialState,\n\t\t\t\t\tstatus: 'error',\n\t\t\t\t\terror: action.payload,\n\t\t\t\t};\n\t\t\tdefault:\n\t\t\t\treturn state;\n\t\t}\n\t};\n\t// useReducer instead of useState to set multiple values simultaneously and prevent unnecessary rerenders.\n\tconst [state, dispatch] = useReducer(reducer, initialState);\n\n\tuseEffect(() => {\n\t\tlet cancelRequest = false;\n\t\tif (!url) return undefined;\n\n\t\tconst fetchData = async () => {\n\t\t\tdispatch({ type: 'FETCHING' });\n\t\t\tif (cache.current[url]) {\n\t\t\t\tconst data = cache.current[url];\n\t\t\t\tdispatch({ type: 'FETCHED', payload: data });\n\t\t\t} else {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch(url);\n\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\tcache.current[url] = data;\n\t\t\t\t\tif (!cancelRequest) {\n\t\t\t\t\t\tdispatch({ type: 'FETCHED', payload: data });\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (!cancelRequest) {\n\t\t\t\t\t\tdispatch({\n\t\t\t\t\t\t\ttype: 'FETCH_ERROR',\n\t\t\t\t\t\t\tpayload: error.message,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfetchData();\n\n\t\t// cleanup switch to prevent data leak on unmount\n\t\treturn function cleanup() {\n\t\t\tcancelRequest = true;\n\t\t};\n\t}, [url]);\n\n\treturn state;\n};\n\nexport default useFetch;\n","import { useEffect, useState } from '@wordpress/element';\n\nconst useKeyPress = (targetKey = null, targetCode = null) => {\n\t// State for keeping track of whether key is pressed\n\tconst [keyPressed, setKeyPressed] = useState(false);\n\t// If pressed key is our target key then set to true\n\tfunction downHandler({ key, code }) {\n\t\tif (code === targetCode) {\n\t\t\tsetKeyPressed(true);\n\t\t}\n\t\tif (key === targetKey) {\n\t\t\tsetKeyPressed(true);\n\t\t}\n\t}\n\t// If released key is our target key then set to false\n\tconst upHandler = ({ key, code }) => {\n\t\tif (code === targetCode) {\n\t\t\tsetKeyPressed(false);\n\t\t}\n\t\tif (key === targetKey) {\n\t\t\tsetKeyPressed(false);\n\t\t}\n\t};\n\t// Add event listeners\n\tuseEffect(() => {\n\t\twindow.addEventListener('keydown', downHandler);\n\t\twindow.addEventListener('keyup', upHandler);\n\t\t// Remove event listeners on cleanup\n\t\treturn () => {\n\t\t\twindow.removeEventListener('keydown', downHandler);\n\t\t\twindow.removeEventListener('keyup', upHandler);\n\t\t};\n\t}, []); // Empty array ensures that effect is only run on mount and unmount\n\treturn keyPressed;\n};\n\nexport default useKeyPress;\n","import { useState } from '@wordpress/element';\n\n/**\n * A react hook to get data from local storage as react state and store data in both.\n * Usage: const [name, setName] = useLocalStorage(\"name\", \"Bob\");\n *\n * @param {*} key\n * @param {*} initialValue\n * @returns [storedValue, setValue]\n */\nconst useLocalStorage = (key, initialValue) => {\n\t// State to store our value\n\t// Pass initial state function to useState so logic is only executed once\n\tconst [storedValue, setStoredValue] = useState(() => {\n\t\ttry {\n\t\t\t// Get from local storage by key\n\t\t\tconst item = window.localStorage.getItem(key);\n\t\t\t// Parse stored json or if none return initialValue\n\t\t\treturn item ? JSON.parse(item) : initialValue;\n\t\t} catch (error) {\n\t\t\t// If error also return initialValue\n\t\t\tconsole.log(error);\n\t\t\treturn initialValue;\n\t\t}\n\t});\n\n\t// Return a wrapped version of useState's setter function that ...\n\t// ... persists the new value to localStorage.\n\tconst setValue = (value) => {\n\t\ttry {\n\t\t\t// Allow value to be a function so we have same API as useState\n\t\t\tconst valueToStore =\n\t\t\t\tvalue instanceof Function ? value(storedValue) : value;\n\t\t\t// Save state\n\t\t\tsetStoredValue(valueToStore);\n\t\t\t// Save to local storage\n\t\t\twindow.localStorage.setItem(key, JSON.stringify(valueToStore));\n\t\t} catch (error) {\n\t\t\t// A more advanced implementation would handle the error case\n\t\t\tconsole.log(error);\n\t\t}\n\t};\n\n\treturn [storedValue, setValue];\n};\n\nexport default useLocalStorage;\n","import { useEffect, useState } from '@wordpress/element';\n\n/**\n * Watches for window size changes and returns the current window size.\n * Usage: const { width, height } = useWindowSize();\n * Adapted from https://usehooks.com/useWindowSize/.\n * @returns {object} width and height of window\n */\nconst useWindowSize = () => {\n\tconst [windowSize, setWindowSize] = useState({\n\t\twidth: undefined,\n\t\theight: undefined,\n\t});\n\n\tuseEffect(() => {\n\t\t// Handler to call on window resize\n\t\tfunction handleResize() {\n\t\t\t// Set window width/height to state\n\t\t\tsetWindowSize({\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight,\n\t\t\t});\n\t\t}\n\n\t\t// Add event listener\n\t\twindow.addEventListener('resize', handleResize);\n\n\t\t// Call handler right away so state gets updated with initial window size\n\t\thandleResize();\n\n\t\t// Remove event listener on cleanup\n\t\treturn () => window.removeEventListener('resize', handleResize);\n\t}, []); // Empty array ensures that effect is only run on mount\n\n\treturn windowSize;\n}\n\nexport default useWindowSize;\n","/**\n * WordPress Dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { store as coreStore } from '@wordpress/core-data';\n\nexport default function useTaxonomy(\n\ttaxonomy = null,\n\tslug = null,\n\tfields = ['id', 'name']\n) {\n\tconst { taxId, taxName } = useSelect((select) => {\n\t\tconst { getEntityRecords } = select(coreStore);\n\n\t\tconst tax =\n\t\t\tnull !== slug\n\t\t\t\t? getEntityRecords('taxonomy', taxonomy, {\n\t\t\t\t\t\tcontext: 'view',\n\t\t\t\t\t\tper_page: 1,\n\t\t\t\t\t\t_fields: fields,\n\t\t\t\t\t\tslug,\n\t\t\t\t\t})\n\t\t\t\t: null;\n\n\t\treturn {\n\t\t\ttaxId: tax?.[0]?.id,\n\t\t\ttaxName: tax?.[0]?.name,\n\t\t};\n\t});\n\n\treturn [taxId, taxName];\n}\n","/**\n * WordPress Dependencies\n */\nimport { useSelect } from '@wordpress/data';\n\n/**\n * useHasSelectedInnerBlock\n * Determine whether one of the inner blocks currently is selected\n *\n * @param {Object} props\n * @param props.clientId\n * @return {boolean} wether the block is the ancestor of selected blocks\n */\nexport default function useHasSelectedInnerBlock(clientId) {\n\t// eslint-disable-next-line prettier/prettier\n\treturn useSelect(\n\t\t(select) => {\n\t\t\tconst hasChildrenSelected = select(\n\t\t\t\t'core/block-editor',\n\t\t\t).hasSelectedInnerBlock(clientId, true);\n\t\t\tconst hasParentSelected =\n\t\t\t\tselect('core/block-editor').getSelectedBlockClientId() === clientId;\n\t\t\treturn hasChildrenSelected || hasParentSelected;\n\t\t},\n\t\t[clientId],\n\t);\n}\n","/**\n * WordPress Dependencies\n */\nimport { useState, useEffect } from '@wordpress/element';\nimport { select } from '@wordpress/data';\n\nexport default function useMultiEntityRecords(\n\tentityType = 'postType',\n\tentitySubTypes = [],\n\tentityArgs = {},\n\toptions = {\n\t\tenabled: false,\n\t}\n) {\n\tconst [resolvingRecords, setIsResolving] = useState(false);\n\tconst [allRecords, setAllRecords] = useState([]);\n\n\tuseEffect(() => {\n\t\tif (!options.enabled) {\n\t\t\treturn;\n\t\t}\n\t\tsetIsResolving(true);\n\t\tconst fetchRecords = async () => {\n\t\t\tconst fetchedRecords = await Promise.all(\n\t\t\t\tentitySubTypes.map((subType) =>\n\t\t\t\t\tselect('core').getEntityRecords(\n\t\t\t\t\t\tentityType,\n\t\t\t\t\t\tsubType,\n\t\t\t\t\t\tentityArgs\n\t\t\t\t\t)\n\t\t\t\t)\n\t\t\t);\n\t\t\t// remove any fetched records that are null\n\t\t\tconst filteredRecords = fetchedRecords.filter(\n\t\t\t\t(records) => records !== null\n\t\t\t);\n\t\t\tconst mergedRecords = filteredRecords.flat();\n\t\t\tsetAllRecords(mergedRecords);\n\t\t\tsetIsResolving(false);\n\t\t};\n\t\tfetchRecords();\n\t}, [entityType, entitySubTypes, entityArgs, options.enabled]);\n\n\treturn {\n\t\trecords: allRecords,\n\t\tisResolving: resolvingRecords,\n\t};\n}\n","import { useRef, useState, useEffect } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\n\nconst useAfterPreview = () => {\n\tconst [isPostPreviewed, setIsPostPreviewed] = useState(false);\n\tconst [isPostPreviewing, setIsPreviewing] = useState(false);\n\tconst isPostPreviewInProgress = useRef(false);\n\tconst { isPreviewing, isAutosavingPost } = useSelect((select) => {\n\t\treturn {\n\t\t\tisPreviewing: select('core/editor').isPreviewingPost(),\n\t\t\tisAutosavingPost: select('core/editor').isAutosavingPost(),\n\t\t};\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (\n\t\t\t(isPreviewing || isAutosavingPost) &&\n\t\t\t!isPostPreviewInProgress.current\n\t\t) {\n\t\t\tconsole.log('start preview', isPostPreviewInProgress.current);\n\t\t\t// Code to run when post is starting to build preview...\n\t\t\tsetIsPostPreviewed(false);\n\t\t\tsetIsPreviewing(true);\n\t\t\tisPostPreviewInProgress.current = true;\n\t\t}\n\t\tconsole.log(\n\t\t\t'check preview',\n\t\t\tisPreviewing,\n\t\t\tisPostPreviewInProgress.current\n\t\t);\n\t\tif (\n\t\t\t!(isPreviewing || isAutosavingPost) &&\n\t\t\tisPostPreviewInProgress.current\n\t\t) {\n\t\t\tconsole.log('end preview', isPostPreviewInProgress.current);\n\t\t\t// Code to run after post is done previewing...\n\t\t\tsetIsPostPreviewed(true);\n\t\t\tsetIsPreviewing(false);\n\t\t\tisPostPreviewInProgress.current = false;\n\t\t}\n\t}, [isPreviewing, isAutosavingPost]);\n\n\treturn {\n\t\tisPreviewed: isPostPreviewed,\n\t\tisPreviewing: isPostPreviewing,\n\t};\n};\n\nexport default useAfterPreview;\n","import { useRef, useState, useEffect } from '@wordpress/element';\nimport { useSelect } from '@wordpress/data';\n\nconst useAfterPublish = () => {\n\tconst [isPostPublished, setIsPostPublished] = useState(false);\n\tconst [isPostPublishing, setIsPublishing] = useState(false);\n\tconst isPostPublishInProgress = useRef(false);\n\tconst { isPublishing, isAutosavingPost } = useSelect((select) => {\n\t\treturn {\n\t\t\tisPublishing: select('core/editor').isPublishingPost(),\n\t\t\tisAutosavingPost: select('core/editor').isAutosavingPost(),\n\t\t};\n\t}, []);\n\n\tuseEffect(() => {\n\t\tif (\n\t\t\t(isPublishing || isAutosavingPost) &&\n\t\t\t!isPostPublishInProgress.current\n\t\t) {\n\t\t\tconsole.log('start publish', isPostPublishInProgress.current);\n\t\t\tsetIsPostPublished(false);\n\t\t\tsetIsPublishing(true);\n\t\t\tisPostPublishInProgress.current = true;\n\t\t}\n\t\tconsole.log(\n\t\t\t'check publish',\n\t\t\tisPublishing,\n\t\t\tisPostPublishInProgress.current\n\t\t);\n\t\tif (\n\t\t\t!(isPublishing || isAutosavingPost) &&\n\t\t\tisPostPublishInProgress.current\n\t\t) {\n\t\t\tconsole.log('end publish', isPostPublishInProgress.current);\n\t\t\tsetIsPostPublished(true);\n\t\t\tsetIsPublishing(false);\n\t\t\tisPostPublishInProgress.current = false;\n\t\t}\n\t}, [isPublishing, isAutosavingPost]);\n\n\treturn {\n\t\tisPublished: isPostPublished,\n\t\tisPublishing: isPostPublishing,\n\t};\n};\n\nexport default useAfterPublish;\n","/*\n * WordPress Dependencies\n */\n\nimport { useState, useEffect } from '@wordpress/element';\nimport { select } from '@wordpress/data';\nimport { decodeEntities } from '@wordpress/html-entities';\n\n/**\n * This react hook converts a list of post ids into an array of options suitable for select controls\n * @param {*} postIds\n * @param {*} postType\n * @return {Array} An array of options with the values as\n * the post id and the label as the post title.\n */\nexport default function usePostIdsAsOptions(postIds = [], postType = 'post') {\n\tconst [options, setOptions] = useState([]);\n\n\tuseEffect(() => {\n\t\tif (postIds.length) {\n\t\t\tconst posts = postIds.map((postId) => {\n\t\t\t\tconst post = select('core').getEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\tpostType,\n\t\t\t\t\tpostId\n\t\t\t\t);\n\t\t\t\tif (!post) {\n\t\t\t\t\t// Don't return anything... the post is not loaded yet\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tvalue: postId,\n\t\t\t\t\tlabel: decodeEntities(post.title.rendered),\n\t\t\t\t};\n\t\t\t});\n\t\t\tsetOptions(posts);\n\t\t}\n\t}, [postIds, postType]);\n\n\treturn options.filter((option) => option !== null);\n}\n","/**\n * WordPress Dependencies\n */\nimport { useSelect, useDispatch } from '@wordpress/data';\n\n/**\n * useDeviceBoundAttribute\n * Bind an attribute value to the current device.\n *\n * @param {string} clientId      - The client ID of the block.\n * @param {string} attributeName - The name of the attribute to update.\n *\n * @return {Array} An array containing the current device attribute value and a function to update the attribute.\n * @example\n * const [maxWidth, setMaxWidth] = useDeviceBoundAttribute(clientId, 'maxWidth');\n * console.log(maxWidth);\n * setMaxWidth('100%');\n */\nexport default function useDeviceBoundAttribute(clientId, attributeName) {\n\tconst { updateBlockAttributes } = useDispatch('core/block-editor');\n\n\tconst { attributes, deviceType } = useSelect(\n\t\t(select) => {\n\t\t\tconst device = select('core/editor').getDeviceType();\n\t\t\treturn {\n\t\t\t\tattributes:\n\t\t\t\t\tselect('core/block-editor').getBlockAttributes(clientId),\n\t\t\t\tdeviceType: device.toLowerCase(),\n\t\t\t};\n\t\t},\n\t\t[clientId]\n\t);\n\n\tconst attributeValue = attributes[attributeName] || {\n\t\tdesktop: '',\n\t\ttablet: '',\n\t\tmobile: '',\n\t};\n\tconst currentDeviceAttributeValue = attributeValue[deviceType] ?? '';\n\n\tconst updateAttributeForCurrentDevice = (value) => {\n\t\tupdateBlockAttributes(clientId, {\n\t\t\t[attributeName]: {\n\t\t\t\t...attributeValue,\n\t\t\t\t[deviceType]: value,\n\t\t\t},\n\t\t});\n\t};\n\n\treturn [currentDeviceAttributeValue, updateAttributeForCurrentDevice];\n}\n"],"names":["window","loadScript","slug","script","prcHooks","ref","dependencies","clientWidth","setClientWidth","useState","calculateClientWidth","current","useEffect","console","log","undefined","ownerDocument","defaultView","addEventListener","removeEventListener","useDebounce","value","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","url","cache","useRef","initialState","status","error","data","state","dispatch","useReducer","reducer","action","type","payload","cancelRequest","async","response","fetch","json","message","fetchData","useKeyPress","targetKey","targetCode","keyPressed","setKeyPressed","downHandler","key","code","upHandler","useLocalStorage","initialValue","storedValue","setStoredValue","item","localStorage","getItem","JSON","parse","valueToStore","Function","setItem","stringify","useWindowSize","windowSize","setWindowSize","width","height","handleResize","innerWidth","innerHeight","taxonomy","fields","taxId","taxName","useSelect","select","getEntityRecords","coreStore","tax","context","per_page","_fields","id","name","clientId","hasChildrenSelected","hasSelectedInnerBlock","hasParentSelected","getSelectedBlockClientId","entityType","entitySubTypes","entityArgs","options","enabled","resolvingRecords","setIsResolving","allRecords","setAllRecords","mergedRecords","Promise","all","map","subType","filter","records","flat","fetchRecords","isResolving","useAfterPreview","isPostPreviewed","setIsPostPreviewed","isPostPreviewing","setIsPreviewing","isPostPreviewInProgress","isPreviewing","isAutosavingPost","isPreviewingPost","isPreviewed","useAfterPublish","isPostPublished","setIsPostPublished","isPostPublishing","setIsPublishing","isPostPublishInProgress","isPublishing","isPublishingPost","isPublished","postIds","postType","setOptions","length","posts","postId","post","getEntityRecord","label","decodeEntities","title","rendered","option","attributeName","_attributeValue$devic","updateBlockAttributes","useDispatch","attributes","deviceType","device","getDeviceType","getBlockAttributes","toLowerCase","attributeValue","desktop","tablet","mobile"],"sourceRoot":""}