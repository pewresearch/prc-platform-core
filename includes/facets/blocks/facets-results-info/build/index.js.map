{"version":3,"file":"index.js","mappings":"mBAAA,MAAM,EAA+BA,OAAW,GAAU,OCApD,EAA+BA,OAAiB,SCAhD,EAA+BA,OAAwB,gBCAvD,EAA+BA,OAAW,GAAe,Y,g/BCgCvDC,KAAIA,GAAKC,EAEXC,EAAW,CAChBC,KC9Bc,WACd,OAAOC,EAAAA,EAAAA,KAACC,EAAAA,KAAI,CAACF,KAAK,WACnB,ED6BCG,KEZc,UAAc,WAC5BC,EAAU,cACVC,EAAa,QACbC,EAAO,SACPC,EAAQ,WACRC,IAEA,MAAMC,GAAaC,EAAAA,EAAAA,iBAEnB,OACCT,EAAAA,EAAAA,KAAA,UAASQ,EAAUE,UAClBV,EAAAA,EAAAA,KAAA,QAAAU,SAAM,mCAGT,IFMAC,EAAAA,EAAAA,mBAAkBf,EAAM,IAAKC,KAAaC,G","sources":["webpack://facets-results-info/external window [\"wp\",\"blocks\"]","webpack://facets-results-info/external window \"prcIcons\"","webpack://facets-results-info/external window \"ReactJSXRuntime\"","webpack://facets-results-info/external window [\"wp\",\"blockEditor\"]","webpack://facets-results-info/./src/index.js","webpack://facets-results-info/./src/icon.jsx","webpack://facets-results-info/./src/edit.jsx"],"sourcesContent":["const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"prcIcons\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"ReactJSXRuntime\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","/**\n * Registers a new block provided a unique name and an object defining its behavior.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\n\n/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport { registerBlockType } from '@wordpress/blocks';\n\n/**\n * Internal Dependencies\n */\n\n/**\n * Lets webpack process CSS, SASS or SCSS files referenced in JavaScript files.\n * All files containing `style` keyword are bundled together. The code used\n * gets applied both to the front of your site and to the editor. All other files\n * get applied to the editor only.\n *\n * @see https://www.npmjs.com/package/@wordpress/scripts#using-css\n */\nimport icon from './icon';\nimport edit from './edit';\n\nimport metadata from './block.json';\n\nconst { name } = metadata;\n\nconst settings = {\n\ticon,\n\tedit,\n};\n\n/**\n * Every block starts by registering a new block type definition.\n *\n * @see https://developer.wordpress.org/block-editor/developers/block-api/#registering-a-block\n */\nregisterBlockType(name, { ...metadata, ...settings });\n","/**\n * External Dependencies\n */\nimport { Icon } from '@prc/icons';\n\nexport default function () {\n\treturn <Icon icon=\"filters\" />;\n}\n","/**\n * External Dependencies\n */\n\n/**\n * WordPress Dependencies\n */\nimport { useBlockProps } from '@wordpress/block-editor';\n\n/**\n * The edit function describes the structure of your block in the context of the\n * editor. This represents what the editor will render when the block is used.\n *\n * @see https://developer.wordpress.org/block-editor/reference-guides/block-api/block-edit-save/#edit\n *\n * @param {Object}   props               Properties passed to the function.\n * @param {Object}   props.attributes    Available block attributes.\n * @param {Function} props.setAttributes Function that updates individual attributes.\n * @param {Object}   props.context       Context object with the block's context values.\n * @param {string}   props.clientId      Unique ID of the block.\n * @param {boolean}  props.isSelected    Whether or not the block is currently selected.\n *\n * @return {WPElement} Element to render.\n */\nexport default function Edit({\n\tattributes,\n\tsetAttributes,\n\tcontext,\n\tclientId,\n\tisSelected,\n}) {\n\tconst blockProps = useBlockProps();\n\n\treturn (\n\t\t<div {...blockProps}>\n\t\t\t<span>Displaying 1-10 of 20 results</span>\n\t\t</div>\n\t);\n}\n"],"names":["window","name","metadata","settings","icon","_jsx","Icon","edit","attributes","setAttributes","context","clientId","isSelected","blockProps","useBlockProps","children","registerBlockType"],"sourceRoot":""}