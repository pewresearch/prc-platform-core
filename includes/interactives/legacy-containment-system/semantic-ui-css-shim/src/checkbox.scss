/*!
 * # Semantic UI - Checkbox
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */

@use "master.variables"as variables;
@use 'sass:math';
@use 'colors';


/*******************************
             Checkbox
 *******************************/

$checkboxSize: 17px;
$checkboxColor: colors.$textColor;
$checkboxLineHeight: $checkboxSize;


/* Label */
$labelDistance: 1.85714em;
/* 26px $ 14/em */

/* Checkbox */
$checkboxBackground: colors.$white;
$checkboxBorder: 1px solid colors.$solidBorderColor;
$checkboxBorderRadius: variables.$u3px;
$checkboxTransition: border variables.$defaultDuration variables.$defaultEasing,
opacity variables.$defaultDuration variables.$defaultEasing,
transform variables.$defaultDuration variables.$defaultEasing,
box-shadow variables.$defaultDuration variables.$defaultEasing;

/* Checkmark */
$checkboxCheckFontSize: 14px;
$checkboxCheckTop: 0px;
$checkboxCheckLeft: 0px;
$checkboxCheckSize: $checkboxSize;

/* Label */
$labelFontSize: variables.$absoluteMedium; //$relativeMedium;
$labelColor: colors.$textColor;
$labelTransition: color variables.$defaultDuration variables.$defaultEasing;

/*-------------------
         States
 --------------------*/

/* Hover */
$checkboxHoverBackground: $checkboxBackground;
$checkboxHoverBorderColor: colors.$selectedBorderColor;
$labelHoverColor: colors.$hoveredTextColor;

/* Pressed */
$checkboxPressedBackground: colors.$offWhite;
$checkboxPressedBorderColor: colors.$selectedBorderColor;
$checkboxPressedColor: colors.$selectedTextColor;
$labelPressedColor: colors.$selectedTextColor;

/* Focus */
$checkboxFocusBackground: colors.$white;
$checkboxFocusBorderColor: colors.$focusedFormMutedBorderColor;
$checkboxFocusCheckColor: colors.$selectedTextColor;
$labelFocusColor: colors.$selectedTextColor;

/* Active */
$labelActiveColor: colors.$selectedTextColor;
$checkboxActiveBackground: colors.$white;
$checkboxActiveBorderColor: colors.$selectedBorderColor;
$checkboxActiveCheckColor: colors.$selectedTextColor;
$checkboxActiveCheckOpacity: 1;

/* Active Focus */
$checkboxActiveFocusBackground: colors.$white;
$checkboxActiveFocusBorderColor: $checkboxFocusBorderColor;
$checkboxActiveFocusCheckColor: colors.$selectedTextColor;

/* Indeterminate */
$checkboxIndeterminateBackground: $checkboxActiveBackground;
$checkboxIndeterminateBorderColor: $checkboxActiveBorderColor;
$checkboxIndeterminateCheckOpacity: 1;
$checkboxIndeterminateCheckColor: $checkboxActiveCheckColor;

/* Disabled */
$disabledCheckboxOpacity: 0.5;
$disabledCheckboxLabelColor: rgba(0, 0, 0, 1);

/*-------------------
         Types
 --------------------*/

/* Radio */
/* Uses px to avoid rounding issues with circles */

$radioSize: 15px;
$radioTop: 1px;
$radioLeft: 0px;
$radioLabelDistance: $labelDistance;

$bulletTop: 1px;
$bulletLeft: 0px;
$bulletScale: math.div(7, 15);
/* 7px as unitless value from radio size */
$bulletColor: colors.$textColor;
$bulletRadius: variables.$circularRadius;

$radioFocusBackground: $checkboxFocusBackground;
$radioFocusBulletColor: $checkboxFocusCheckColor;

$radioActiveBackground: $checkboxActiveBackground;
$radioActiveBulletColor: $checkboxActiveCheckColor;

$radioActiveFocusBackground: $checkboxActiveFocusBackground;
$radioActiveFocusBulletColor: $checkboxActiveFocusCheckColor;

/* Slider & Toggle Handle */
$handleBackground: colors.$white variables.$subtleGradient;
$handleBoxShadow: variables.$subtleShadow,
0px 0px 0px 1px colors.$borderColor inset;

/* Slider */
$sliderHandleSize: 1.5rem;
$sliderLineWidth: 3.5rem;
$sliderTransitionDuration: 0.3s;

$sliderHandleOffset: (1rem - $sliderHandleSize) * 0.5;
$sliderHandleTransition: left $sliderTransitionDuration variables.$defaultEasing;

$sliderWidth: $sliderLineWidth;
$sliderHeight: ($sliderHandleSize + $sliderHandleOffset);

$sliderLineHeight: variables.$u3px;
$sliderLineVerticalOffset: 0.4rem;
$sliderLineColor: colors.$transparentBlack;
$sliderLineRadius: variables.$circularRadius;
$sliderLineTransition: background $sliderTransitionDuration variables.$defaultEasing;

$sliderTravelDistance: $sliderLineWidth - $sliderHandleSize;

$sliderLabelDistance: $sliderLineWidth+1rem;
$sliderOffLabelColor: colors.$unselectedTextColor;

$sliderLabelLineHeight: 1rem;

/* Slider States */
$sliderHoverLaneBackground: colors.$veryStrongTransparentBlack;
$sliderHoverLabelColor: colors.$hoveredTextColor;

$sliderOnLineColor: colors.$lightBlack;
$sliderOnLabelColor: colors.$selectedTextColor;

$sliderOnFocusLineColor: colors.$lightBlackFocus;
$sliderOnFocusLabelColor: $sliderOnLabelColor;



/* Toggle */
$toggleLaneWidth: 3.5rem;
$toggleHandleSize: 1.5rem;
$toggleTransitionDuration: 0.2s;

$toggleWidth: $toggleLaneWidth;
$toggleHeight: $toggleHandleSize;

$toggleHandleRadius: variables.$circularRadius;
$toggleHandleOffset: 0rem;
$toggleHandleTransition: background $sliderTransitionDuration variables.$defaultEasing,
left $sliderTransitionDuration variables.$defaultEasing;

$toggleLaneBackground: colors.$transparentBlack;
$toggleLaneHeight: $toggleHandleSize;
$toggleLaneBoxShadow: none;
$toggleLaneVerticalOffset: 0rem;
$toggleOffOffset: -0.05rem;
$toggleOnOffset: ($toggleLaneWidth - $toggleHandleSize)+0.15rem;

$toggleLabelDistance: $toggleLaneWidth+1rem;
$toggleLabelLineHeight: 1.5rem;
$toggleLabelOffset: 0.15em;


$toggleFocusColor: colors.$veryStrongTransparentBlack;
$toggleHoverColor: $toggleFocusColor;

$toggleOffLabelColor: $checkboxColor;
$toggleOffHandleBoxShadow: $handleBoxShadow;

$toggleOnLabelColor: colors.$selectedTextColor;
$toggleOnLaneColor: colors.$primaryColor;

$toggleOnHandleBoxShadow: $handleBoxShadow;

$toggleOnFocusLaneColor: colors.$primaryColorFocus;
$toggleOnFocusLabelColor: $toggleOnLabelColor;



/*-------------------
       Variations
 --------------------*/

@font-face {
    font-family: "Checkbox";
    src: url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAALAIAAAwAwT1MvMg8SBD8AAAC8AAAAYGNtYXAYVtCJAAABHAAAAFRnYXNwAAAAEAAAAXAAAAAIZ2x5Zn4huwUAAAF4AAABYGhlYWQGPe1ZAAAC2AAAADZoaGVhB30DyAAAAxAAAAAkaG10eBBKAEUAAAM0AAAAHGxvY2EAmgESAAADUAAAABBtYXhwAAkALwAAA2AAAAAgbmFtZSC8IugAAAOAAAABknBvc3QAAwAAAAAFFAAAACAAAwMTAZAABQAAApkCzAAAAI8CmQLMAAAB6wAzAQkAAAAAAAAAAAAAAAAAAAABEAAAAAAAAAAAAAAAAAAAAABAAADoAgPA/8AAQAPAAEAAAAABAAAAAAAAAAAAAAAgAAAAAAADAAAAAwAAABwAAQADAAAAHAADAAEAAAAcAAQAOAAAAAoACAACAAIAAQAg6AL//f//AAAAAAAg6AD//f//AAH/4xgEAAMAAQAAAAAAAAAAAAAAAQAB//8ADwABAAAAAAAAAAAAAgAANzkBAAAAAAEAAAAAAAAAAAACAAA3OQEAAAAAAQAAAAAAAAAAAAIAADc5AQAAAAABAEUAUQO7AvgAGgAAARQHAQYjIicBJjU0PwE2MzIfAQE2MzIfARYVA7sQ/hQQFhcQ/uMQEE4QFxcQqAF2EBcXEE4QAnMWEP4UEBABHRAXFhBOEBCoAXcQEE4QFwAAAAABAAABbgMlAkkAFAAAARUUBwYjISInJj0BNDc2MyEyFxYVAyUQEBf9SRcQEBAQFwK3FxAQAhJtFxAQEBAXbRcQEBAQFwAAAAABAAAASQMlA24ALAAAARUUBwYrARUUBwYrASInJj0BIyInJj0BNDc2OwE1NDc2OwEyFxYdATMyFxYVAyUQEBfuEBAXbhYQEO4XEBAQEBfuEBAWbhcQEO4XEBACEm0XEBDuFxAQEBAX7hAQF20XEBDuFxAQEBAX7hAQFwAAAQAAAAIAAHRSzT9fDzz1AAsEAAAAAADRsdR3AAAAANGx1HcAAAAAA7sDbgAAAAgAAgAAAAAAAAABAAADwP/AAAAEAAAAAAADuwABAAAAAAAAAAAAAAAAAAAABwQAAAAAAAAAAAAAAAIAAAAEAABFAyUAAAMlAAAAAAAAAAoAFAAeAE4AcgCwAAEAAAAHAC0AAQAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAOAK4AAQAAAAAAAQAIAAAAAQAAAAAAAgAHAGkAAQAAAAAAAwAIADkAAQAAAAAABAAIAH4AAQAAAAAABQALABgAAQAAAAAABgAIAFEAAQAAAAAACgAaAJYAAwABBAkAAQAQAAgAAwABBAkAAgAOAHAAAwABBAkAAwAQAEEAAwABBAkABAAQAIYAAwABBAkABQAWACMAAwABBAkABgAQAFkAAwABBAkACgA0ALBDaGVja2JveABDAGgAZQBjAGsAYgBvAHhWZXJzaW9uIDIuMABWAGUAcgBzAGkAbwBuACAAMgAuADBDaGVja2JveABDAGgAZQBjAGsAYgBvAHhDaGVja2JveABDAGgAZQBjAGsAYgBvAHhSZWd1bGFyAFIAZQBnAHUAbABhAHJDaGVja2JveABDAGgAZQBjAGsAYgBvAHhGb250IGdlbmVyYXRlZCBieSBJY29Nb29uLgBGAG8AbgB0ACAAZwBlAG4AZQByAGEAdABlAGQAIABiAHkAIABJAGMAbwBNAG8AbwBuAC4AAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) format("truetype");
}

/*******************************
            Checkbox
 *******************************/

/*--------------
     Content
 ---------------*/

.ui.checkbox {
    position: relative;
    display: inline-block;
    backface-visibility: hidden;
    outline: none;
    vertical-align: baseline;
    font-style: normal;

    min-height: $checkboxSize;
    font-size: variables.$medium;
    line-height: $checkboxLineHeight;
    min-width: $checkboxSize;
}

/* HTML Checkbox */
.ui.checkbox input[type="checkbox"],
.ui.checkbox input[type="radio"] {
    cursor: pointer;
    position: absolute;
    top: 0px;
    left: 0px;
    opacity: 0 !important;
    outline: none;
    z-index: 3;
    width: $checkboxSize;
    height: $checkboxSize;
}

/*--------------
       Box
 ---------------*/

.ui.checkbox .box,
.ui.checkbox label {
    cursor: auto;
    position: relative;
    display: block;
    padding-left: $labelDistance;
    outline: none;
    font-size: $labelFontSize;
}

.ui.checkbox .box:before,
.ui.checkbox label:before {
    position: absolute;
    top: 0px;
    left: 0px;

    width: $checkboxSize;
    height: $checkboxSize;
    content: "";

    background: $checkboxBackground;
    border-radius: $checkboxBorderRadius;

    transition: $checkboxTransition;
    border: $checkboxBorder;
}

/*--------------
     Checkmark
 ---------------*/

.ui.checkbox .box:after,
.ui.checkbox label:after {
    position: absolute;
    font-size: $checkboxCheckFontSize;
    top: $checkboxCheckTop;
    left: $checkboxCheckLeft;
    width: $checkboxCheckSize;
    height: $checkboxCheckSize;
    text-align: center;

    opacity: 0;
    color: $checkboxColor;
    transition: $checkboxTransition;
    //
    font-family: "Checkbox";
}

/* Checked */
.ui.checkbox input:checked~.box:after,
.ui.checkbox input:checked~label:after {
    content: "\e800";
}

/* Indeterminate */
.ui.checkbox input:indeterminate~.box:after,
.ui.checkbox input:indeterminate~label:after {
    font-size: 12px;
    content: "\e801";
}

/*  UTF Reference
 .check:before { content: '\e800'; }
 .dash:before  { content: '\e801'; }
 .plus:before { content: '\e802'; }
 */

/*--------------
       Label
 ---------------*/

/* Inside */
.ui.checkbox label,
.ui.checkbox+label {
    color: $labelColor;
    transition: $labelTransition;
}

/* Outside */
.ui.checkbox+label {
    vertical-align: middle;
}

/*******************************
            States
 *******************************/

/*--------------
       Hover
 ---------------*/

.ui.checkbox .box:hover::before,
.ui.checkbox label:hover::before {
    background: $checkboxHoverBackground;
    border-color: $checkboxHoverBorderColor;
}

.ui.checkbox label:hover,
.ui.checkbox+label:hover {
    color: $labelHoverColor;
}

/*--------------
       Down
 ---------------*/

.ui.checkbox .box:active::before,
.ui.checkbox label:active::before {
    background: $checkboxPressedBackground;
    border-color: $checkboxPressedBorderColor;
}

.ui.checkbox .box:active::after,
.ui.checkbox label:active::after {
    color: $checkboxPressedColor;
}

.ui.checkbox input:active~label {
    color: $labelPressedColor;
}

/*--------------
      Focus
 ---------------*/

.ui.checkbox input:focus~.box:before,
.ui.checkbox input:focus~label:before {
    background: $checkboxFocusBackground;
    border-color: $checkboxFocusBorderColor;
}

.ui.checkbox input:focus~.box:after,
.ui.checkbox input:focus~label:after {
    color: $checkboxFocusCheckColor;
}

.ui.checkbox input:focus~label {
    color: $labelFocusColor;
}

/*--------------
      Active
 ---------------*/

.ui.checkbox input:checked~.box:before,
.ui.checkbox input:checked~label:before {
    background: $checkboxActiveBackground;
    border-color: $checkboxActiveBorderColor;
}

.ui.checkbox input:checked~.box:after,
.ui.checkbox input:checked~label:after {
    opacity: $checkboxActiveCheckOpacity;
    color: $checkboxActiveCheckColor;
}

/*--------------
   Indeterminate
 ---------------*/

.ui.checkbox input:not([type="radio"]):indeterminate~.box:before,
.ui.checkbox input:not([type="radio"]):indeterminate~label:before {
    background: $checkboxIndeterminateBackground;
    border-color: $checkboxIndeterminateBorderColor;
}

.ui.checkbox input:not([type="radio"]):indeterminate~.box:after,
.ui.checkbox input:not([type="radio"]):indeterminate~label:after {
    opacity: $checkboxIndeterminateCheckOpacity;
    color: $checkboxIndeterminateCheckColor;
}

/*--------------
   Active Focus
 ---------------*/

.ui.checkbox input:not([type="radio"]):indeterminate:focus~.box:before,
.ui.checkbox input:not([type="radio"]):indeterminate:focus~label:before,
.ui.checkbox input:checked:focus~.box:before,
.ui.checkbox input:checked:focus~label:before {
    background: $checkboxActiveFocusBackground;
    border-color: $checkboxActiveFocusBorderColor;
}

.ui.checkbox input:not([type="radio"]):indeterminate:focus~.box:after,
.ui.checkbox input:not([type="radio"]):indeterminate:focus~label:after,
.ui.checkbox input:checked:focus~.box:after,
.ui.checkbox input:checked:focus~label:after {
    color: $checkboxActiveFocusCheckColor;
}

/*--------------
     Read-Only
 ---------------*/

.ui.read-only.checkbox,
.ui.read-only.checkbox label {
    cursor: default;
}

/*--------------
      Disabled
 ---------------*/

.ui.disabled.checkbox .box:after,
.ui.disabled.checkbox label,
.ui.checkbox input[disabled]~.box:after,
.ui.checkbox input[disabled]~label {
    cursor: default !important;
    opacity: $disabledCheckboxOpacity;
    color: $disabledCheckboxLabelColor;
}

/*--------------
      Hidden
 ---------------*/

/* Initialized checkbox moves input below element
  to prevent manually triggering */
.ui.checkbox input.hidden {
    z-index: -1;
}

/* Selectable Label */
.ui.checkbox input.hidden+label {
    cursor: pointer;
    user-select: none;
}

/*******************************
              Types
 *******************************/

/*--------------
      Radio
 ---------------*/

.ui.radio.checkbox {
    min-height: $radioSize;
}

.ui.radio.checkbox .box,
.ui.radio.checkbox label {
    padding-left: $radioLabelDistance;
}

/* Box */
.ui.radio.checkbox .box:before,
.ui.radio.checkbox label:before {
    content: "";
    transform: none;

    width: $radioSize;
    height: $radioSize;
    border-radius: variables.$circularRadius;
    top: $radioTop;
    left: $radioLeft;
}

/* Bullet */
.ui.radio.checkbox .box:after,
.ui.radio.checkbox label:after {
    border: none;
    content: "" !important;
    width: $radioSize;
    height: $radioSize;
    line-height: $radioSize;
}

/* Radio Checkbox */
.ui.radio.checkbox .box:after,
.ui.radio.checkbox label:after {
    top: $bulletTop;
    left: $bulletLeft;
    width: $radioSize;
    height: $radioSize;
    border-radius: $bulletRadius;
    transform: scale($bulletScale);
    background-color: $bulletColor;
}

/* Focus */
.ui.radio.checkbox input:focus~.box:before,
.ui.radio.checkbox input:focus~label:before {
    background-color: $radioFocusBackground;
}

.ui.radio.checkbox input:focus~.box:after,
.ui.radio.checkbox input:focus~label:after {
    background-color: $radioFocusBulletColor;
}

/* Indeterminate */
.ui.radio.checkbox input:indeterminate~.box:after,
.ui.radio.checkbox input:indeterminate~label:after {
    opacity: 0;
}

/* Active */
.ui.radio.checkbox input:checked~.box:before,
.ui.radio.checkbox input:checked~label:before {
    background-color: $radioActiveBackground;
}

.ui.radio.checkbox input:checked~.box:after,
.ui.radio.checkbox input:checked~label:after {
    background-color: $radioActiveBulletColor;
}

/* Active Focus */
.ui.radio.checkbox input:focus:checked~.box:before,
.ui.radio.checkbox input:focus:checked~label:before {
    background-color: $radioActiveFocusBackground;
}

.ui.radio.checkbox input:focus:checked~.box:after,
.ui.radio.checkbox input:focus:checked~label:after {
    background-color: $radioActiveFocusBulletColor;
}

/*--------------
      Slider
 ---------------*/

.ui.slider.checkbox {
    min-height: $sliderHeight;
}

/* Input */
.ui.slider.checkbox input {
    width: $sliderWidth;
    height: $sliderHeight;
}

/* Label */
.ui.slider.checkbox .box,
.ui.slider.checkbox label {
    padding-left: $sliderLabelDistance;
    line-height: $sliderLabelLineHeight;
    color: $sliderOffLabelColor;
}

/* Line */
.ui.slider.checkbox .box:before,
.ui.slider.checkbox label:before {
    display: block;
    position: absolute;
    content: "";
    transform: none;
    border: none !important;
    left: 0em;
    z-index: 1;

    top: $sliderLineVerticalOffset;

    background-color: $sliderLineColor;
    width: $sliderLineWidth;
    height: $sliderLineHeight;

    transform: none;
    border-radius: $sliderLineRadius;
    transition: $sliderLineTransition;
}

/* Handle */
.ui.slider.checkbox .box:after,
.ui.slider.checkbox label:after {
    background: $handleBackground;
    position: absolute;
    content: "" !important;
    opacity: 1;
    z-index: 2;

    border: none;
    box-shadow: $handleBoxShadow;
    width: $sliderHandleSize;
    height: $sliderHandleSize;
    top: $sliderHandleOffset;
    left: 0em;
    transform: none;

    border-radius: variables.$circularRadius;
    transition: $sliderHandleTransition;
}

/* Focus */
.ui.slider.checkbox input:focus~.box:before,
.ui.slider.checkbox input:focus~label:before {
    background-color: $toggleFocusColor;
    border: none;
}

/* Hover */
.ui.slider.checkbox .box:hover,
.ui.slider.checkbox label:hover {
    color: $sliderHoverLabelColor;
}

.ui.slider.checkbox .box:hover::before,
.ui.slider.checkbox label:hover::before {
    background: $sliderHoverLaneBackground;
}

/* Active */
.ui.slider.checkbox input:checked~.box,
.ui.slider.checkbox input:checked~label {
    color: $sliderOnLabelColor !important;
}

.ui.slider.checkbox input:checked~.box:before,
.ui.slider.checkbox input:checked~label:before {
    background-color: $sliderOnLineColor !important;
}

.ui.slider.checkbox input:checked~.box:after,
.ui.slider.checkbox input:checked~label:after {
    left: $sliderTravelDistance;
}

/* Active Focus */
.ui.slider.checkbox input:focus:checked~.box,
.ui.slider.checkbox input:focus:checked~label {
    color: $sliderOnFocusLabelColor !important;
}

.ui.slider.checkbox input:focus:checked~.box:before,
.ui.slider.checkbox input:focus:checked~label:before {
    background-color: $sliderOnFocusLineColor !important;
}

/*--------------
      Toggle
 ---------------*/

.ui.toggle.checkbox {
    min-height: $toggleHeight;
}

/* Input */
.ui.toggle.checkbox input {
    width: $toggleWidth;
    height: $toggleHeight;
}

/* Label */
.ui.toggle.checkbox .box,
.ui.toggle.checkbox label {
    min-height: $toggleHandleSize;
    padding-left: $toggleLabelDistance;
    color: $toggleOffLabelColor;
}

.ui.toggle.checkbox label {
    padding-top: $toggleLabelOffset;
}

/* Switch */
.ui.toggle.checkbox .box:before,
.ui.toggle.checkbox label:before {
    display: block;
    position: absolute;
    content: "";
    z-index: 1;
    transform: none;
    border: none;

    top: $toggleLaneVerticalOffset;

    background: $toggleLaneBackground;
    box-shadow: $toggleLaneBoxShadow;
    width: $toggleLaneWidth;
    height: $toggleLaneHeight;
    border-radius: $toggleHandleRadius;
}

/* Handle */
.ui.toggle.checkbox .box:after,
.ui.toggle.checkbox label:after {
    background: $handleBackground;
    position: absolute;
    content: "" !important;
    opacity: 1;
    z-index: 2;

    border: none;
    box-shadow: $handleBoxShadow;
    width: $toggleHandleSize;
    height: $toggleHandleSize;
    top: $toggleHandleOffset;
    left: 0em;

    border-radius: variables.$circularRadius;
    transition: $toggleHandleTransition;
}

.ui.toggle.checkbox input~.box:after,
.ui.toggle.checkbox input~label:after {
    left: $toggleOffOffset;
    box-shadow: $toggleOffHandleBoxShadow;
}

/* Focus */
.ui.toggle.checkbox input:focus~.box:before,
.ui.toggle.checkbox input:focus~label:before {
    background-color: $toggleFocusColor;
    border: none;
}

/* Hover */
.ui.toggle.checkbox .box:hover::before,
.ui.toggle.checkbox label:hover::before {
    background-color: $toggleHoverColor;
    border: none;
}

/* Active */
.ui.toggle.checkbox input:checked~.box,
.ui.toggle.checkbox input:checked~label {
    color: $toggleOnLabelColor !important;
}

.ui.toggle.checkbox input:checked~.box:before,
.ui.toggle.checkbox input:checked~label:before {
    background-color: $toggleOnLaneColor !important;
}

.ui.toggle.checkbox input:checked~.box:after,
.ui.toggle.checkbox input:checked~label:after {
    left: $toggleOnOffset;
    box-shadow: $toggleOnHandleBoxShadow;
}

/* Active Focus */
.ui.toggle.checkbox input:focus:checked~.box,
.ui.toggle.checkbox input:focus:checked~label {
    color: $toggleOnFocusLabelColor !important;
}

.ui.toggle.checkbox input:focus:checked~.box:before,
.ui.toggle.checkbox input:focus:checked~label:before {
    background-color: $toggleOnFocusLaneColor !important;
}

/*******************************
             Variations
 *******************************/

/*--------------
      Fitted
 ---------------*/

.ui.fitted.checkbox .box,
.ui.fitted.checkbox label {
    padding-left: 0em !important;
}

.ui.fitted.toggle.checkbox,
.ui.fitted.toggle.checkbox {
    width: $toggleWidth;
}

.ui.fitted.slider.checkbox,
.ui.fitted.slider.checkbox {
    width: $sliderWidth;
}